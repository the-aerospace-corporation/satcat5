//////////////////////////////////////////////////////////////////////////
// Copyright 2024 The Aerospace Corporation.
// This file is a part of SatCat5, licensed under CERN-OHL-W v2 or later.
//////////////////////////////////////////////////////////////////////////

#include <cstring>
#include <satcat5/aes_cipher.h>

using satcat5::aes::Cipher;

// SubWord() is a function that takes a four-byte input word and
// applies the S-box to each of the four bytes to produce an output word.
static constexpr u8 SBOX[256] = {
    // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

static constexpr u8 XTIME[256] = {
    // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,
    0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,
    0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,
    0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,
    0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,
    0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,
    0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,
    0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,
    0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,
    0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,
    0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,
    0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5};

// The round constant word array, RCON[i], contains the values given by
// x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
static constexpr u8 RCON[11] = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

Cipher::Cipher(const u8* key, unsigned key_size_bits)
    : m_nr(0), m_nk(0), m_rnd_key{}
{
    if (key_size_bits == 256) {
        m_nk = 8;
        m_nr = 14;
    } else if (key_size_bits == 192) {
        m_nk = 6;
        m_nr = 12;
    } else if (key_size_bits == 128) {
        m_nk = 4;
        m_nr = 10;
    }
    key_expansion(key, key_size_bits);
}

void Cipher::encrypt(const u8 plain[16], u8 cipher[16]) const {
    memcpy(cipher, plain, 16);
    state_t* state = (state_t*) cipher;
    // Add the First round key to the state before starting the rounds.
    add_round_key(0, state);
    // There will be m_nr rounds.
    // The first m_nr-1 rounds are identical.
    // These m_nr rounds are executed in the loop below.
    // Last one without mix_columns()
    for (u8 round = 1; ; ++round) {
        sub_bytes(state);
        shift_rows(state);
        if (round == m_nr) break;
        mix_columns(state);
        add_round_key(round, state);
    }
    // Add round key to last round
    add_round_key(m_nr, state);
}

void Cipher::key_expansion(const u8* key, unsigned key_size) {
    u8 tempa[4]; // Used for the column/row operations

    // The first round key is the key itself.
    for (u8 i = 0; i < m_nk; ++i) {
        m_rnd_key[(i * 4) + 0] = key[(i * 4) + 0];
        m_rnd_key[(i * 4) + 1] = key[(i * 4) + 1];
        m_rnd_key[(i * 4) + 2] = key[(i * 4) + 2];
        m_rnd_key[(i * 4) + 3] = key[(i * 4) + 3];
    }

    // All other round keys are found from the previous round keys.
    for (u8 i = m_nk; i < 4 * (m_nr + 1); ++i) {
        {
            const u8 k = (i - 1) * 4;
            tempa[0] = m_rnd_key[k + 0];
            tempa[1] = m_rnd_key[k + 1];
            tempa[2] = m_rnd_key[k + 2];
            tempa[3] = m_rnd_key[k + 3];
        }

        if (i % m_nk == 0) {
            // This function shifts the 4 bytes in a word to the left once.
            // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

            // Function RotWord()
            {
                const u8 tmp = tempa[0];
                tempa[0] = tempa[1];
                tempa[1] = tempa[2];
                tempa[2] = tempa[3];
                tempa[3] = tmp;
            }

            // Function Subword()
            {
                tempa[0] = SBOX[tempa[0]];
                tempa[1] = SBOX[tempa[1]];
                tempa[2] = SBOX[tempa[2]];
                tempa[3] = SBOX[tempa[3]];
            }

            tempa[0] = tempa[0] ^ RCON[i / m_nk];
        }
        if (key_size == 256) {
            if (i % m_nk == 4) {
                // Function Subword()
                tempa[0] = SBOX[tempa[0]];
                tempa[1] = SBOX[tempa[1]];
                tempa[2] = SBOX[tempa[2]];
                tempa[3] = SBOX[tempa[3]];
            }
        }
        const u8 j = i * 4, k = (i - m_nk) * 4;
        m_rnd_key[j + 0] = m_rnd_key[k + 0] ^ tempa[0];
        m_rnd_key[j + 1] = m_rnd_key[k + 1] ^ tempa[1];
        m_rnd_key[j + 2] = m_rnd_key[k + 2] ^ tempa[2];
        m_rnd_key[j + 3] = m_rnd_key[k + 3] ^ tempa[3];
    }
}

void Cipher::add_round_key(u8 round, state_t* state) const {
    for (u8 i = 0; i < 4; ++i)
        for (u8 j = 0; j < 4; ++j)
            (*state)[i][j] ^= m_rnd_key[(round*16) + (i*4) + j];
}

void Cipher::sub_bytes(state_t* state) const {
    for (u8 i = 0; i < 4; ++i)
        for (u8 j = 0; j < 4; ++j)
            (*state)[i][j] = SBOX[(*state)[i][j]];
}

void Cipher::shift_rows(state_t* state) const {
    u8 temp;

    // Rotate first row 1 columns to left
    temp = (*state)[0][1];
    (*state)[0][1] = (*state)[1][1];
    (*state)[1][1] = (*state)[2][1];
    (*state)[2][1] = (*state)[3][1];
    (*state)[3][1] = temp;

    // Rotate second row 2 columns to left
    temp = (*state)[0][2];
    (*state)[0][2] = (*state)[2][2];
    (*state)[2][2] = temp;

    temp = (*state)[1][2];
    (*state)[1][2] = (*state)[3][2];
    (*state)[3][2] = temp;

    // Rotate third row 3 columns to left
    temp = (*state)[0][3];
    (*state)[0][3] = (*state)[3][3];
    (*state)[3][3] = (*state)[2][3];
    (*state)[2][3] = (*state)[1][3];
    (*state)[1][3] = temp;
}

void Cipher::mix_columns(state_t* state) const {
    for (u8 i = 0; i < 4; ++i) {
        u8 raw = (*state)[i][0];
        u8 tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
        (*state)[i][0] ^= tmp ^ XTIME[(*state)[i][0] ^ (*state)[i][1]];
        (*state)[i][1] ^= tmp ^ XTIME[(*state)[i][1] ^ (*state)[i][2]];
        (*state)[i][2] ^= tmp ^ XTIME[(*state)[i][2] ^ (*state)[i][3]];
        (*state)[i][3] ^= tmp ^ XTIME[(*state)[i][3] ^ raw];
    }
}
